import uuid
import requests
import asyncio
import logging
import sys
import sqlite3
import hashlib
from datetime import datetime
from flask import Flask, request, jsonify
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "**"  # –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
YOOMONEY_WALLET = "**"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney
YOOMONEY_SECRET = "your_secret_word"  # –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ YooMoney
YOOMONEY_AMOUNT = 500  # –°—É–º–º–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö
GROUP_ID = -1002291268265  # ID –∑–∞–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø—ã
BASE_URL = "https://nvvnv.onrender.com"  # –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = Bot(token=TOKEN)
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    try:
        conn = sqlite3.connect('data.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS payments
                     (user_id TEXT, amount REAL, label TEXT, datetime TEXT, status TEXT)''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

init_db()

# API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
@app.route('/generate_payment', methods=['GET'])
def generate_payment():
    try:
        user_id = request.args.get('user_id')
        label = str(uuid.uuid4())
        payment_url = (
            f"https://yoomoney.ru/quickpay/confirm.xml?"
            f"receiver={YOOMONEY_WALLET}&"
            f"quickpay-form=shop&"
            f"targets=Subscription&"
            f"paymentType=AC&"
            f"sum={YOOMONEY_AMOUNT}&"
            f"label={label}"
        )
        conn = sqlite3.connect('data.db')
        c = conn.cursor()
        c.execute("INSERT INTO payments (user_id, amount, label, status) VALUES (?, ?, ?, ?)",
                  (user_id, YOOMONEY_AMOUNT, label, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è user_id={user_id}, label={label}")
        return jsonify({"payment_url": payment_url, "label": label})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /generate_payment: {e}")
        return jsonify({"error": str(e)}), 500

# Webhook –¥–ª—è YooMoney
@app.route('/yoomoney-webhook', methods=['POST'])
async def webhook():
    try:
        data = request.form.to_dict()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ YooMoney: {data}")
        params = [
            data.get('notification_type', ''),
            data.get('operation_id', ''),
            data.get('amount', ''),
            data.get('currency', ''),
            data.get('datetime', ''),
            data.get('sender', ''),
            data.get('codepro', ''),
            YOOMONEY_SECRET,
            data.get('label', '')
        ]
        check_string = '&'.join(params)
        sha1_hash = hashlib.sha1(check_string.encode()).hexdigest()
        if sha1_hash != data.get('sha1_hash'):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π SHA1-—Ö—ç—à")
            return "Invalid notification", 400

        if data.get('notification_type') == 'p2p-incoming':
            label = data.get('label')
            amount = float(data.get('amount'))
            conn = sqlite3.connect('data.db')
            c = conn.cursor()
            c.execute("UPDATE payments SET status = ?, datetime = ? WHERE label = ?",
                      ("completed", datetime.now().isoformat(), label))
            c.execute("SELECT user_id FROM payments WHERE label = ?", (label,))
            user_id = c.fetchone()[0]
            conn.commit()
            conn.close()
            logger.info(f"–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞ –¥–ª—è user_id={user_id}, label={label}")
            await bot.send_message(user_id, "–£—Å–ø–µ—à–Ω–æ")
            invite_link = await bot.create_chat_invite_link(chat_id=GROUP_ID, member_limit=1)
            await bot.send_message(user_id, f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: {invite_link.invite_link}")
        return "OK", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /yoomoney-webhook: {e}")
        return jsonify({"error": str(e)}), 500

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")
        response = requests.get(f"{BASE_URL}/generate_payment?user_id={user_id}")
        response.raise_for_status()
        data = response.json()
        payment_url = data["payment_url"]

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", url=payment_url))
        welcome_text = (
            "–¢–∞—Ä–∏—Ñ: —Ñ—É–ª–ª\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500.00 üá∑üá∫RUB\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –º–µ—Å—è—Ü\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:\n"
            "‚Ä¢ –ú–æ–π –∫–∞–π—Ñ (–∫–∞–Ω–∞–ª)"
        )
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def on_startup(_):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

def run_flask():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞")
        app.run(host='0.0.0.0', port=5000)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        from threading import Thread
        flask_thread = Thread(target=run_flask)
        flask_thread.start()
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)
