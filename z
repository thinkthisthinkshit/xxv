import logging
import sys
import uuid
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web, ClientSession
from urllib.parse import urlencode
import traceback
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"
YOOMONEY_WALLET = "4100118178122985"
KOYEB_URL = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app/save_payment"
WEBHOOK_HOST = "https://your-bot.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π Render URL, –Ω–∞–ø—Ä–∏–º–µ—Ä, https://newmirapaybot.onrender.com
WEBHOOK_PATH = "/telegram"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
try:
    bot = Bot(token=TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    logger.info("–ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="pay"))
        welcome_text = (
            "–¢–∞—Ä–∏—Ñ: —Ñ—É–ª–ª\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 2.00 üá∑üá∫RUB\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –º–µ—Å—è—Ü\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:\n"
            "‚Ä¢ –ú–æ–π –∫–∞–π—Ñ (–∫–∞–Ω–∞–ª)"
        )
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
@dp.message_handler(commands=['pay'])
@dp.callback_query_handler(text="pay")
async def pay_command(message_or_callback: types.Message | types.CallbackQuery):
    try:
        if isinstance(message_or_callback, types.Message):
            user_id = str(message_or_callback.from_user.id)
            chat_id = message_or_callback.chat.id
        else:
            user_id = str(message_or_callback.from_user.id)
            chat_id = message_or_callback.message.chat.id

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /pay –æ—Ç user_id={user_id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
        payment_label = str(uuid.uuid4())
        payment_params = {
            "quickpay-form": "shop",
            "paymentType": "AC",
            "targets": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}",
            "sum": 2.00,
            "label": payment_label,
            "receiver": YOOMONEY_WALLET,
            "successURL": f"https://t.me/{(await bot.get_me()).username}"
        }
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?{urlencode(payment_params)}"
       
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ label:user_id –ª–æ–∫–∞–ª—å–Ω–æ
        conn = sqlite3.connect("payments.db")
        c = conn.cursor()
        c.execute("INSERT INTO payments (label, user_id, status) VALUES (?, ?, ?)",
                  (payment_label, user_id, "pending"))
        conn.commit()
        conn.close()
       
        # –û—Ç–ø—Ä–∞–≤–∫–∞ label:user_id –Ω–∞ Koyeb
        async with ClientSession() as session:
            try:
                async with session.post(KOYEB_URL, json={"label": payment_label, "user_id": user_id}) as response:
                    if response.status == 200:
                        logger.info(f"label={payment_label} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Koyeb –¥–ª—è user_id={user_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Koyeb: {await response.text()}")
                        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Koyeb: {e}")
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
       
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))
        await bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã 2 —Ä—É–±–ª–µ–π:", reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è user_id={user_id}, label={payment_label}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /pay: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook
async def on_startup(_):
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {WEBHOOK_URL}")
    try:
        await bot.delete_webhook()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook, –µ—Å–ª–∏ –µ—Å—Ç—å
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}\n{traceback.format_exc()}")
        sys.exit(1)

async def on_shutdown(_):
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook")
    try:
        await bot.delete_webhook()
        await dp.storage.close()
        await dp.storage.wait_closed()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

async def handle_webhook(request):
    try:
        update = await request.json()
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram")
        await dp.process_update(types.Update(**update))
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook")
    try:
        port = int(os.getenv("PORT", 8080))  # Render –∑–∞–¥–∞—ë—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        web.run_app(app, host="0.0.0.0", port=port)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}\n{traceback.format_exc()}")
        sys.exit(1)














import logging
import sys
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web, ClientSession
from urllib.parse import urlencode
import traceback
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"
YOOMONEY_WALLET = "4100118178122985"
KOYEB_URL = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app/save_payment"
WEBHOOK_HOST = "https://your-bot.onrender.com"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π Render URL
WEBHOOK_PATH = "/telegram"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
try:
    bot = Bot(token=TOKEN)
    dp = Dispatcher(bot)
    logger.info("–ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={user_id}")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="pay"))
        welcome_text = (
            "–¢–∞—Ä–∏—Ñ: —Ñ—É–ª–ª\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 2.00 üá∑üá∫RUB\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 1 –º–µ—Å—è—Ü\n\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º:\n"
            "‚Ä¢ –ú–æ–π –∫–∞–π—Ñ (–∫–∞–Ω–∞–ª)"
        )
        await message.answer(welcome_text, reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start –¥–ª—è user_id={user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pay –∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
@dp.message_handler(commands=['pay'])
@dp.callback_query_handler(text="pay")
async def pay_command(message_or_callback: types.Message | types.CallbackQuery):
    try:
        if isinstance(message_or_callback, types.Message):
            user_id = str(message_or_callback.from_user.id)
            chat_id = message_or_callback.chat.id
        else:
            user_id = str(message_or_callback.from_user.id)
            chat_id = message_or_callback.message.chat.id

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /pay –æ—Ç user_id={user_id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
        payment_label = str(uuid.uuid4())
        payment_params = {
            "quickpay-form": "shop",
            "paymentType": "AC",
            "targets": f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id}",
            "sum": 2.00,
            "label": payment_label,
            "receiver": YOOMONEY_WALLET,
            "successURL": f"https://t.me/{(await bot.get_me()).username}"
        }
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?{urlencode(payment_params)}"
       
        # –û—Ç–ø—Ä–∞–≤–∫–∞ label:user_id –Ω–∞ Koyeb
        async with ClientSession() as session:
            try:
                async with session.post(KOYEB_URL, json={"label": payment_label, "user_id": user_id}) as response:
                    if response.status == 200:
                        logger.info(f"label={payment_label} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Koyeb –¥–ª—è user_id={user_id}")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Koyeb: {await response.text()}")
                        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Koyeb: {e}")
                await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
       
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url))
        await bot.send_message(chat_id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã 2 —Ä—É–±–ª–µ–π:", reply_markup=keyboard)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è user_id={user_id}, label={payment_label}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /pay: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook
async def on_startup(_):
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook")
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        sys.exit(1)

async def on_shutdown(_):
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ webhook")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()

async def handle_webhook(request):
    try:
        update = await request.json()
        await dp.process_update(types.Update(**update))
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook")
    try:
        port = int(os.getenv("PORT", 8080))  # Render –∑–∞–¥–∞—ë—Ç PORT —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        web.run_app(app, host="0.0.0.0", port=port)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}\n{traceback.format_exc()}")
        sys.exit(1)












import logging
import sys
import psycopg2
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"
YOOMONEY_WALLET = "4100118178122985"
NOTIFICATION_SECRET = "CoqQlgE3E5cTzyAKY1LSiLU1"
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"
DB_CONNECTION = "postgresql://postgres.bdjjtisuhtbrogvotves:[YOUR-PASSWORD]@aws-0-eu-north-1.pooler.supabase.com:6543/postgres"  # –ó–∞–º–µ–Ω–∏ [YOUR-PASSWORD]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
def init_db():
    conn = psycopg2.connect(DB_CONNECTION)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
       
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
       
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
       
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ p2p-incoming –∏ card-incoming
        if data.get("notification_type") in ["p2p-incoming", "card-incoming"]:
            conn = psycopg2.connect(DB_CONNECTION)
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = %s", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = %s WHERE label = %s", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
       
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
       
        conn = psycopg2.connect(DB_CONNECTION)
        c = conn.cursor()
        c.execute("INSERT INTO payments (label, user_id, status) VALUES (%s, %s, %s) ON CONFLICT (label) DO UPDATE SET user_id = %s, status = %s",
                  (label, user_id, "pending", user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)





























aiohttp==3.8.6 psycopg2-binary==2.9.9


aiogram==2.25.1 aiohttp==3.8.6





































import logging
import sys
import psycopg2
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"
YOOMONEY_WALLET = "4100118178122985"
NOTIFICATION_SECRET = "CoqQlgE3E5cTzyAKISSUE1"
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"
DB_CONNECTION = "postgresql://postgres.bdjjtisuhtbrogvotves:[YOUR-PASSWORD]@aws-0-eu-north-1.pooler.supabase.com:6543/postgres"  # –ó–∞–º–µ–Ω–∏ [YOUR-PASSWORD]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
def init_db():
    conn = psycopg2.connect(DB_CONNECTION)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
       
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
       
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
       
        if data.get("notification_type") == "p2p-incoming" and data.get("status") == "success":
            conn = psycopg2.connect(DB_CONNECTION)
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = %s", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = %s WHERE label = %s", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
       
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
       
        conn = psycopg2.connect(DB_CONNECTION)
        c = conn.cursor()
        c.execute("INSERT INTO payments (label, user_id, status) VALUES (%s, %s, %s) ON CONFLICT (label) DO UPDATE SET user_id = %s, status = %s",
                  (label, user_id, "pending", user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)
















import psycopg2

   DB_CONNECTION = "postgresql://postgres:[YOUR-PASSWORD]@db.<project_ref>.supabase.co:5432/postgres"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–æ–∫—É
   try:
       conn = psycopg2.connect(DB_CONNECTION)
       print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
       conn.close()
   except Exception as e:
       print(f"–û—à–∏–±–∫–∞: {e}")



import logging
import sys
import psycopg2
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"
YOOMONEY_WALLET = "4100118178122985"
NOTIFICATION_SECRET = "CoqQlgE3E5cTzyAKY1LSiLU1"
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"
DB_CONNECTION = "postgresql://user:password@host:port/dbname"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Å—Ç—Ä–æ–∫—É

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL
def init_db():
    conn = psycopg2.connect(DB_CONNECTION)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
       
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
       
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
       
        if data.get("notification_type") == "p2p-incoming" and data.get("status") == "success":
            conn = psycopg2.connect(DB_CONNECTION)
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = %s", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = %s WHERE label = %s", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
       
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
       
        conn = psycopg2.connect(DB_CONNECTION)
        c = conn.cursor()
        c.execute("INSERT INTO payments (label, user_id, status) VALUES (%s, %s, %s) ON CONFLICT (label) DO UPDATE SET user_id = %s, status = %s",
                  (label, user_id, "pending", user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)














curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00&currency=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=<–Ω–æ–≤—ã–π_label>&sha1_hash=<–Ω–æ–≤—ã–π_—Ö—ç—à>&status=success"





curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00&currency=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=e672165f-28f6-4354-9fd2-228c73aa9d7b&sha1_hash=wronghash&status=success"



curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00&currency=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=e672165f-28f6-4354-9fd2-228c73aa9d7b&sha1_hash=9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8&status=success"









import logging
import sys
import sqlite3
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (@NewMiraPayBot)
YOOMONEY_WALLET = "4100118178122985"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney (41001...)
NOTIFICATION_SECRET = "CoqQlgE3E5cTzyAKY1LSiLU1"  # –°–µ–∫—Ä–µ—Ç YooMoney
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"  # URL Koyeb
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π sha1_hash: {sha1_hash}, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: {data.get('sha1_hash', '')}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
       
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
       
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
       
        if data.get("notification_type") == "p2p-incoming" and data.get("status") == "success":
            conn = sqlite3.connect("payments.db")
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = ?", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = ? WHERE label = ?", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
       
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
       
        conn = sqlite3.connect("payments.db")
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO payments (label, user_id, status) VALUES (?, ?, ?)",
                  (label, user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)












import¬†hashlibparams¬†=¬†[¬†¬†¬†¬†"p2p-incoming",¬†¬†¬†¬†"test-op",¬†¬†¬†¬†"500.0",¬†¬†#¬†str(500.00)¬†–≤¬†webhook.py¬†–¥–∞—ë—Ç¬†"500.0"¬†¬†¬†¬†"643",¬†¬†¬†¬†"2025-05-05T20:50:56Z",¬†¬†#¬†–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ¬†–≤—Ä–µ–º—è,¬†—Å–æ–≤–ø–∞–¥–∞–µ—Ç¬†—Å¬†curl¬†¬†¬†¬†"41001000040",¬†¬†¬†¬†"false",¬†¬†¬†¬†"CoqQlgE3E5cTzyAKY1LSiLU1",¬†¬†¬†¬†"e672165f-28f6-4354-9fd2-228c73aa9d7b"¬†¬†#¬†–ù–æ–≤—ã–π¬†label]sha1_hash¬†=¬†hashlib.sha1("&".join(params).encode()).hexdigest()print(sha1_hash)







–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?





Grok 3


–ö–æ–¥

–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä




import¬†hashlibparams¬†=¬†[¬†¬†¬†¬†"p2p-incoming",¬†¬†¬†¬†"test-op",¬†¬†¬†¬†"500.0",¬†¬†#¬†str(500.00)¬†–≤¬†webhook.py¬†–¥–∞—ë—Ç¬†"500.0"¬†¬†¬†¬†"643",¬†¬†¬†¬†"2025-05-05T20:50:56Z",¬†¬†#¬†–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ¬†–≤—Ä–µ–º—è,¬†—Å–æ–≤–ø–∞–¥–∞–µ—Ç¬†—Å¬†curl¬†¬†¬†¬†"41001000040",¬†¬†¬†¬†"false",¬†¬†¬†¬†"CoqQlgE3E5cTzyAKY1LSiLU1",¬†¬†¬†¬†"e672165f-28f6-4354-9fd2-228c73aa9d7b"¬†¬†#¬†–ù–æ–≤—ã–π¬†label]sha1_hash¬†=¬†hashlib.sha1("&".join(params).encode()).hexdigest()print(sha1_hash)
curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00&currency=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=e672165f-28f6-4354-9fd2-228c73aa9d7b&sha1_hash=9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8&status=success"

import logging
import sys
import sqlite3
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (@NewMiraPayBot)
YOOMONEY_WALLET = "4100118178122985"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney (41001...)
NOTIFICATION_SECRET = "CoqQlgE3E5cTzyAKY1LSiLU1"  # –°–µ–∫—Ä–µ—Ç YooMoney
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"  # URL Koyeb
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
       
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
       
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
       
        if data.get("notification_type") == "p2p-incoming" and data.get("status") == "success":
            conn = sqlite3.connect("payments.db")
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = ?", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = ? WHERE label = ?", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
       
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
       
        conn = sqlite3.connect("payments.db")
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO payments (label, user_id, status) VALUES (?, ?, ?)",
                  (label, user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)



import hashlib

params = [
    "p2p-incoming",
    "test-op",
    "500.0",  # str(500.00) –≤ webhook.py –¥–∞—ë—Ç "500.0"
    "643",
    "2025-05-05T20:50:56Z",
    "41001000040",
    "false",
    "CoqQlgE3E5cTzyAKY1LSiLU1",
    "094555d4-552d-42ab-b27f-a5d47b7d7e52"  # –¢–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π label
]
sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
print(sha1_hash)










































curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00¬§cy=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=094555d4-552d-42ab-b27f-a5d47b7d7e52&sha1_hash=408330c2a47ed63e0e4067629399af6f83143aa8&status=success"



import sqlite3
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "your_bot_token"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (@NewMiraPayBot)
YOOMONEY_WALLET = "your_wallet_number"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney (41001...)
NOTIFICATION_SECRET = "your_notification_secret"  # –°–µ–∫—Ä–µ—Ç YooMoney
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"  # URL Koyeb
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
        
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
        
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
        
        if data.get("notification_type") == "p2p-incoming" and data.get("status") == "success":
            conn = sqlite3.connect("payments.db")
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = ?", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = ? WHERE label = ?", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
        
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
        
        conn = sqlite3.connect("payments.db")
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO payments (label, user_id, status) VALUES (?, ?, ?)",
                  (label, user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)


—Å



curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00&currency=643&datetime=2025-05-05T18:58:27Z&sender=41001000040&codepro=false&label=ba65d1fc-2e83-4318-b3be-d27193cee1de&sha1_hash=YOUR_SHA1_HASH&status=success"

import hashlib
params = [
    "p2p-incoming",
    "test-op",
    "500.00",
    "643",
    "2025-05-05T18:58:27Z",
    "41001000040",
    "false",
    "your_notification_secret",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–≤–æ–π NOTIFICATION_SECRET
    "ba65d1fc-2e83-4318-b3be-d27193cee1de"
]
sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
print(sha1_hash)
















import logging
import sys
import sqlite3
import hashlib
from aiohttp import web, ClientSession
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7669060547:AAF1zdVIBcmmFKQGhQ7UGUT8foFKW4EBVxs"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (@NewMiraPayBot)
YOOMONEY_WALLET = "4100118178122985"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ YooMoney (41001...)
NOTIFICATION_SECRET = "CoqQlgE3E5cTzyAKY1LSiLU1"  # –°–µ–∫—Ä–µ—Ç YooMoney
WEBHOOK_HOST = "https://favourite-brinna-createthisshit-eca5920c.koyeb.app"  # URL Koyeb
YOOMONEY_NOTIFY_PATH = "/yoomoney_notify"
SAVE_PAYMENT_PATH = "/save_payment"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite
def init_db():
    conn = sqlite3.connect("payments.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS payments
                 (label TEXT PRIMARY KEY, user_id TEXT, status TEXT)''')
    conn.commit()
    conn.close()

init_db()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def verify_yoomoney_notification(data):
    params = [
        data.get("notification_type", ""),
        data.get("operation_id", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("datetime", ""),
        data.get("sender", ""),
        data.get("codepro", ""),
        NOTIFICATION_SECRET,
        data.get("label", "")
    ]
    sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
    logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π sha1_hash: {sha1_hash}, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: {data.get('sha1_hash', '')}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    return sha1_hash == data.get("sha1_hash", "")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async def send_telegram_message(user_id, text):
    async with ClientSession() as session:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": user_id,
            "text": text
        }
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_yoomoney_notify(request):
    try:
        data = await request.post()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
       
        if not verify_yoomoney_notification(data):
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π sha1_hash –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Invalid hash")
       
        label = data.get("label")
        if not label:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
            return web.Response(status=400, text="Missing label")
       
        if data.get("notification_type") == "p2p-incoming" and data.get("status") == "success":
            conn = sqlite3.connect("payments.db")
            c = conn.cursor()
            c.execute("SELECT user_id FROM payments WHERE label = ?", (label,))
            result = c.fetchone()
            if result:
                user_id = result[0]
                c.execute("UPDATE payments SET status = ? WHERE label = ?", ("success", label))
                conn.commit()
                await send_telegram_message(user_id, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                logger.info(f"–£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è label={label}, user_id={user_id}")
            else:
                logger.error(f"Label {label} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            conn.close()
       
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YooMoney —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label:user_id
async def handle_save_payment(request):
    try:
        data = await request.json()
        label = data.get("label")
        user_id = data.get("user_id")
        if not label or not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –∏–ª–∏ user_id –≤ –∑–∞–ø—Ä–æ—Å–µ")
            return web.Response(status=400, text="Missing label or user_id")
       
        conn = sqlite3.connect("payments.db")
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO payments (label, user_id, status) VALUES (?, ?, ?)",
                  (label, user_id, "pending"))
        conn.commit()
        conn.close()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: label={label}, user_id={user_id}")
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è payment: {e}\n{traceback.format_exc()}")
        return web.Response(status=500)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = web.Application()
app.router.add_post(YOOMONEY_NOTIFY_PATH, handle_yoomoney_notify)
app.router.add_post(SAVE_PAYMENT_PATH, handle_save_payment)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
    try:
        init_db()
        web.run_app(app, host="0.0.0.0", port=8000)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}\n{traceback.format_exc()}")
        sys.exit(1)





















curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00¬§cy=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=3deb017c-a5de-4fd8-9c43-0e916e5ab085&sha1_hash=9f8e7d6c5b4a3e2f1a0b9c8d7e6f5a4b3c2d1e0&status=success"






import hashlib

params = [
    "p2p-incoming",
    "test-op",
    "500.0",  # str(500.00) –≤ webhook.py –¥–∞—ë—Ç "500.0"
    "643",
    "2025-05-05T20:50:56Z",
    "41001000040",
    "false",
    "CoqQlgE3E5cTzyAKY1LSiLU1",
    "c95baa49-5b30-480e-91ff-3cae81c27009"
]
sha1_hash = hashlib.sha1("&".join(params).encode()).hexdigest()
print(sha1_hash)

















curl -v -X POST https://favourite-brinna-createthisshit-eca5920c.koyeb.app/yoomoney_notify -d "notification_type=p2p-incoming&operation_id=test-op&amount=500.00&currency=643&datetime=2025-05-05T20:50:56Z&sender=41001000040&codepro=false&label=c95baa49-5b30-480e-91ff-3cae81c27009&sha1_hash=wronghash&status=success"
